# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "rec"), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
plot.margin = unit(c(-2, 0, -2, -.1), "cm")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
plot.margin = unit(c(-2, -20, -2, -.1), "cm")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
plot.margin = unit(c(-2, -2, -2, -.1), "cm")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
plot.margin = unit(c(-1, -1, -1, -.1), "cm")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
plot.margin = unit(c(-1, -1, -1, -.1), "px")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
plot.margin = unit(c(-0.11, -0.1, -0.1, -.1), "cm")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "red"), # The theme
plot.background = element_rect(fill = "red"), # bg of the plot
# plot.margin = unit(c(-0.11, -0.1, -0.1, -.1), "cm")
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
songs <- list.files("songs_txt/",pattern = ".txt",full.names = T)
for (song in songs){
song_bn <- basename(song)
song_md <- str_replace(song_bn,".txt",".md")
fileConn<-file(paste0("songs_md/",song_md))
# TODO: specify encodings, apperentyl there was an issue with the "a" in vis-a-vis
readLines(song) %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*") %>%
str_replace_all("\\_","\\\\_") %>%
writeLines(fileConn)
close.connection(fileConn)
}
# Chunk 1
title: ""
site: bookdown::bookdown_site
documentclass: book
link-citations: yes
---
# Chunk 2
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, dev.args=list(bg = "transparent"))
# Chunk 3
output <- knitr::opts_knit$get("rmarkdown.pandoc.to")# html / latex / docx
if(output == "html"){
pander::pandoc.header("Songs {-}",1)
pander::pandoc.image("misc/title.png")
}
# Chunk 4
file.create("docs/.nojekyll")
suppressMessages(library(tabr))
suppressMessages(library(dplyr))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(gridExtra))
suppressMessages(library(cowplot))
# Chunk 5
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
# Transform all songs in songs_txt into markdown files
songs <- list.files("songs_txt/",pattern = ".txt",full.names = T)
for (song in songs){
song_bn <- basename(song)
song_md <- str_replace(song_bn,".txt",".md")
fileConn<-file(paste0("songs_md/",song_md))
# TODO: specify encodings, apperentyl there was an issue with the "a" in vis-a-vis
readLines(song) %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*") %>%
str_replace_all("\\_","\\\\_") %>%
writeLines(fileConn)
close.connection(fileConn)
}
rmarkdown::render("test_individual_song.Rmd")
rmarkdown::render("test_individual_song.Rmd")
rmarkdown::render("test_individual_song.Rmd",output_dir = "testfolder/")
rmarkdown::render("test_individual_song.Rmd","html_document",output_dir = "testfolder/")
rmarkdown::render("test_individual_song.Rmd","html_document",output_dir = "testfolder/")
rmarkdown::render("test_individual_song.Rmd","html_document",output_dir = "testfolder/")
rmarkdown::render("../test_individual_song.Rmd","html_document",output_dir = "testfolder/")
rmarkdown::render("test_individual_song.Rmd","html_document",output_dir = "testfolder/")
rmarkdown::render("testfolder/test_individual_song.Rmd","html_document",output_dir = "testfolder/")
rmarkdown::render("testfolder/test_individual_song.Rmd","html_document",output_dir = "testfolder/")
# Chunk 1
title: ""
site: bookdown::bookdown_site
documentclass: book
link-citations: yes
---
# Chunk 2
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, dev.args=list(bg = "transparent"))
# Chunk 3
output <- knitr::opts_knit$get("rmarkdown.pandoc.to")# html / latex / docx
if(output == "html"){
pander::pandoc.header("Songs {-}",1)
pander::pandoc.image("misc/title.png")
}
# Chunk 4
file.create("docs/.nojekyll")
suppressMessages(library(tabr))
suppressMessages(library(dplyr))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(gridExtra))
suppressMessages(library(cowplot))
# Chunk 5
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
# Transform all songs in songs_txt into markdown files
songs <- list.files("songs_txt/",pattern = ".txt",full.names = T)
for (song in songs){
song_bn <- basename(song)
song_md <- str_replace(song_bn,".txt",".md")
fileConn<-file(paste0("songs_md/",song_md))
# TODO: specify encodings, apperentyl there was an issue with the "a" in vis-a-vis
readLines(song) %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*") %>%
str_replace_all("\\_","\\\\_") %>%
writeLines(fileConn)
close.connection(fileConn)
}
rmarkdown::render("testfolder/test_individual_song.Rmd","html_document",output_dir = "testfolder/")
plot_chords(list("Cadd9" = "x32030"))
plot_chords(list("Cadd9" = "x32030"))
ggsave("testfolder/test.png")
plot_chord("x32030")
plot_chords(list("Bm" = "224432",
"Em" = "779987",
"A7" = "575655",
"D" = "557775",
"G7" = "353433"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
chordnames <- map(chords, ~.x[2])
print(chordnames)
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
chordnames <- map(chords, ~.x[[2]])
plot_grid(plotlist = plots,ncol = 4,labels = chordnames)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
chordnames <- map(chords, ~.x[2])
plot_grid(plotlist = plots,ncol = 4,labels = chordnames)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3) +
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
chordnames <- map(chords, ~.x[2])
plot_grid(plotlist = plots,ncol = 4)
}
