"songs/blowing_in_the_wind.Rmd",
"songs/streets_of_london.Rmd",
"songs/where_have_all_the_flowers_gone.Rmd",
"songs/sound_of_silence.Rmd",
"songs/dust_in_the_wind.Rmd",
"songs/sweet_home_alabama.Rmd",
# leaving on a jet plane
# bad moon rising?
# hotel California
# let it be? /
# Layla?
# your song
# yesterday
# take me home country roads
# crocodile rock
# breakfast in America
# California dreaming
# morning has broken
# father and son
# lady in black
# San Francisco
# stand by me
# candle in the wind
# how deep is your love
# what a wonderful world
# killing me softly
# knocking on heavens door
# nights in white satin
# i'm gonna be 500 miles
# tears in heaven / eternal flame
#"03_Kinderlieder.Rmd",
# hey pipi langstrumpf
# Schlaf anne
# Sunnestrahl
"04_Deutsch.Rmd",
"songs/so_kleine_haende.Rmd",
"songs/s_zundhoelzli.Rmd",
"songs/heidi.Rmd",
"songs/dr_alpeflug.Rmd",
"songs/alls_wo_mir_id_finger_chunnt.Rmd",
"songs/bim_coiffeur.Rmd",
"songs/hemmige.Rmd",
"songs/dr_wecker.Rmd",
"songs/arabisch.Rmd",
"songs/eskimo.Rmd",
"songs/nueni_tramm.Rmd",
"songs/bergvagabunden.Rmd",
"songs/ein_bett_im_kornfeld.Rmd",
"songs/der_traum_vom_fliegen.Rmd",
"songs/das_testament.Rmd",
"songs/sie_hoert_musik_nur_wenn_sie_laut_ist.Rmd",
"songs/kaspar.Rmd",
"songs/heute_hier_morgen_dort.Rmd",
#\chapter{Tabs}
#"songs/mad_world_tabs.Rmd",
#"songs/godfather.Rmd",
#"songs/all_my_loving.Rmd",
#"songs/blackbird_tabs.Rmd",
"05_Weihnachtslieder.Rmd",
# in der weihnachtsb?ckereki
#\input{eine_muh_eine_maeh}
"songs/silent_night.Rmd",
# go tell it on the mountain
"songs/oh_holy_night.Rmd",
"songs/marys_bornchild.Rmd",
"songs/oh_come_all_ye_faithful.Rmd",
"songs/the_first_noel.Rmd",
"songs/leise_rieselt_der_schnee.Rmd",
"songs/ihr_kinderleit_kommet.Rmd",
"songs/suesser_die_glocken_nie_klingen.Rmd",
"songs/am_weihnachtsbaume_die_lichter_brennen.Rmd",
"songs/oh_du_froehliche.Rmd",
"songs/oh_tannenbaum.Rmd",
"songs/kommet_ihr_hirten.Rmd"
)
vec <- character()
vec
songs
dirname(song)
song_bn
song_rl
song <- songs[1]
song
song_rl <- readLines(song)
song_rl
str_detect(song_rl,"#")
str_detect(song_rl,"#")%>%
song_rl[.]
maintitle <- str_detect(song_rl,"#")%>%
song_rl[.]
maintitle
chunk <- c("",maintitle,"","")
append(vec,chunk)
vec <- character()
for (song in songs[1]){
song_rl <- readLines(song)
song_bn <- basename(song)
if(dirname(song) == "songs"){
song_txt <- str_replace(song_bn,".Rmd",".txt")
song_md <- str_replace(song_bn,".Rmd",".md")
fileConn<-file(paste0("songs_txt/",song_txt))
title_bool <- song_rl %>%
str_detect("##")
title <- song_rl[title_bool]
chunk <- c(title,"",paste0("```{r child = '","songs_md/",song_md,"'}"),"```","")
vec <- append(vec,chunk)
chunk_bool <- song_rl %>%
str_detect("```")
song_clean <- song_rl[!chunk_bool & !title_bool]
writeLines(song_clean,fileConn)
close.connection(fileConn)
} else{
maintitle <- str_detect(song_rl,"#")%>%
song_rl[.]
chunk <- c("",maintitle,"","")
append(vec,chunk)
}
}
fileConn<-file("all.Rmd")
writeLines(vec,fileConn)
vec
for (song in songs[1]){
song_rl <- readLines(song)
song_bn <- basename(song)
if(dirname(song) == "songs"){
song_txt <- str_replace(song_bn,".Rmd",".txt")
song_md <- str_replace(song_bn,".Rmd",".md")
fileConn<-file(paste0("songs_txt/",song_txt))
title_bool <- song_rl %>%
str_detect("##")
title <- song_rl[title_bool]
chunk <- c(title,"",paste0("```{r child = '","songs_md/",song_md,"'}"),"```","")
vec <- append(vec,chunk)
chunk_bool <- song_rl %>%
str_detect("```")
song_clean <- song_rl[!chunk_bool & !title_bool]
writeLines(song_clean,fileConn)
close.connection(fileConn)
} else{
maintitle <- str_detect(song_rl,"#")%>%
song_rl[.]
chunk <- c("",maintitle,"","")
append(vec,chunk)
}
}
vec
vec <- character()
for (song in songs){
song_rl <- readLines(song)
song_bn <- basename(song)
if(dirname(song) == "songs"){
song_txt <- str_replace(song_bn,".Rmd",".txt")
song_md <- str_replace(song_bn,".Rmd",".md")
fileConn<-file(paste0("songs_txt/",song_txt))
title_bool <- song_rl %>%
str_detect("##")
title <- song_rl[title_bool]
chunk <- c(title,"",paste0("```{r child = '","songs_md/",song_md,"'}"),"```","")
vec <- append(vec,chunk)
chunk_bool <- song_rl %>%
str_detect("```")
song_clean <- song_rl[!chunk_bool & !title_bool]
writeLines(song_clean,fileConn)
close.connection(fileConn)
} else{
maintitle <- str_detect(song_rl,"#")%>%
song_rl[.]
chunk <- c("",maintitle,"","")
append(vec,chunk)
}
}
vec
songs
song
songs[1]
songs[1] -> song
dirname(song) == "songs"
vec <- character()
for (song in songs){
song_rl <- readLines(song)
song_bn <- basename(song)
if(dirname(song) == "songs"){
print("song")
song_txt <- str_replace(song_bn,".Rmd",".txt")
song_md <- str_replace(song_bn,".Rmd",".md")
fileConn<-file(paste0("songs_txt/",song_txt))
title_bool <- song_rl %>%
str_detect("##")
title <- song_rl[title_bool]
chunk <- c(title,"",paste0("```{r child = '","songs_md/",song_md,"'}"),"```","")
vec <- append(vec,chunk)
chunk_bool <- song_rl %>%
str_detect("```")
song_clean <- song_rl[!chunk_bool & !title_bool]
writeLines(song_clean,fileConn)
close.connection(fileConn)
} else{
print("maintitle")
maintitle <- str_detect(song_rl,"#")%>%
song_rl[.]
chunk <- c("",maintitle,"","")
append(vec,chunk)
}
}
vec
vec <- character()
for (song in songs){
song_rl <- readLines(song)
song_bn <- basename(song)
if(dirname(song) == "songs"){
print("song")
song_txt <- str_replace(song_bn,".Rmd",".txt")
song_md <- str_replace(song_bn,".Rmd",".md")
fileConn<-file(paste0("songs_txt/",song_txt))
title_bool <- song_rl %>%
str_detect("##")
title <- song_rl[title_bool]
chunk <- c(title,"",paste0("```{r child = '","songs_md/",song_md,"'}"),"```","")
vec <- append(vec,chunk)
chunk_bool <- song_rl %>%
str_detect("```")
song_clean <- song_rl[!chunk_bool & !title_bool]
writeLines(song_clean,fileConn)
close.connection(fileConn)
} else{
print("maintitle")
maintitle <- str_detect(song_rl,"#")%>%
song_rl[.]
chunk <- c("",maintitle,"","")
vec <- append(vec,chunk)
}
}
vec
fileConn<-file("all.Rmd")
writeLines(vec,fileConn)
song_rl
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("*","\*") %>%
str_replace_all("_","\_") %>%
writeLines(fileConn)
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("*","\\*") %>%
str_replace_all("_","\\_") %>%
writeLines(fileConn)
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("*","\\\*") %>%
str_replace_all("_","\\\_") %>%
writeLines(fileConn)
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("*","\\\\*") %>%
str_replace_all("_","\\\\_") %>%
writeLines(fileConn)
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("*","\\*") %>%
str_replace_all("_","\\_") %>%
writeLines(fileConn)
song_rl %>%
map(~paste0(.x,"\\"))
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;")
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\*","\\*")
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\*")
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*") %
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*")
song_rl %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*") %>%
str_replace_all("_","\\_")
file.create("docs/.nojekyll")
file.create("docs/.nojekyll")
suppressMessages(file.create("docs/.nojekyll"))
git add -A
library(rvest)
html("https://www.google.com/maps/search/migros/@47.224767,8.6465935,11.5z")
library(rvest)
Sys.time()
rsconnect::writeManifest
rsconnect::writeManifest()
setwd("docs/")
rsconnect::writeManifest()
git add -A
capo&nbsp;on&nbsp;5th&nbsp;OR&nbsp;6th&nbsp;fret\
\
Intro\
|------------------------------------------|\
|------------------------------------------|\
|-7/5--7-5-7--4/5-4--5-4-5--2/4-2--4-2-4-2-|\
|-9/7--9-7-9--5/7-5--7-5-7--4/5-4--5-4-5-4-|\
|------------------------------------------|\
|------------------------------------------|&nbsp;&nbsp;Em..\
\
Am&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Em\
Dance&nbsp;me&nbsp;to&nbsp;your&nbsp;beauty&nbsp;with&nbsp;a&nbsp;burning&nbsp;violin\
Am&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Em\
Dance&nbsp;me&nbsp;through&nbsp;the&nbsp;panic&nbsp;'til&nbsp;I'm&nbsp;gathered&nbsp;safely&nbsp;in\
Am&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Em\
Lift&nbsp;me&nbsp;like&nbsp;an&nbsp;olive&nbsp;branch&nbsp;and&nbsp;be&nbsp;my&nbsp;homeward&nbsp;dove\
B7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Em\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love\
B7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Em\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love\
\
Oh&nbsp;let&nbsp;me&nbsp;see&nbsp;your&nbsp;beauty&nbsp;when&nbsp;the&nbsp;witnesses&nbsp;are&nbsp;gone&nbsp;\
Let&nbsp;me&nbsp;feel&nbsp;you&nbsp;moving&nbsp;like&nbsp;they&nbsp;do&nbsp;in&nbsp;Babylon&nbsp;\
Show&nbsp;me&nbsp;slowly&nbsp;what&nbsp;I&nbsp;only&nbsp;know&nbsp;the&nbsp;limits&nbsp;of&nbsp;\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love&nbsp;\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love&nbsp;\
\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;wedding&nbsp;now,&nbsp;dance&nbsp;me&nbsp;on&nbsp;and&nbsp;on&nbsp;\
Dance&nbsp;me&nbsp;very&nbsp;tenderly&nbsp;and&nbsp;dance&nbsp;me&nbsp;very&nbsp;long&nbsp;\
We're&nbsp;both&nbsp;of&nbsp;us&nbsp;beneath&nbsp;our&nbsp;love,&nbsp;we're&nbsp;both&nbsp;of&nbsp;us&nbsp;above&nbsp;\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love&nbsp;\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love\
\
Dance&nbsp;me&nbsp;to&nbsp;your&nbsp;beauty&nbsp;with&nbsp;a&nbsp;burning&nbsp;violin&nbsp;\
Dance&nbsp;me&nbsp;through&nbsp;the&nbsp;panic&nbsp;till&nbsp;I'm&nbsp;gathered&nbsp;safely&nbsp;in&nbsp;\
Touch&nbsp;me&nbsp;with&nbsp;your&nbsp;naked&nbsp;hand&nbsp;or&nbsp;touch&nbsp;me&nbsp;with&nbsp;your&nbsp;glove&nbsp;\
Dance&nbsp;me&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;love&nbsp;(3x)\
\
Play&nbsp;Intro\
\
plot_chords(list("Bm" = "224432",
"Em" = "779987",
"A7" = "575655",
"D" = "557775",
"G7" = "353433"))
# Chunk 1
title: "Songs"
site: bookdown::bookdown_site
documentclass: book
link-citations: yes
---
# About {-}
![](rhi3.png)
Some songs, selected by me. Version `r Sys.time()`.
# Chunk 2
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, dev.args=list(bg = "transparent"))
# Chunk 3
file.create("docs/.nojekyll")
suppressMessages(library(tabr))
suppressMessages(library(dplyr))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(gridExtra))
suppressMessages(library(cowplot))
# Chunk 4
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3)+
labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
# Chunk 5
# Transform all songs in songs_txt into markdown files
songs <- list.files("songs_txt/",pattern = ".txt",full.names = T)
for (song in songs){
song_bn <- basename(song)
song_md <- str_replace(song_bn,".txt",".md")
fileConn<-file(paste0("songs_md/",song_md))
# TODO: specify encodings, apperentyl there was an issue with the "a" in vis-a-vis
readLines(song) %>%
map(~paste0(.x,"\\")) %>%
str_replace_all("\\s","&nbsp;") %>%
str_replace_all("\\*","\\\\*") %>%
str_replace_all("\\_","\\\\_") %>%
writeLines(fileConn)
close.connection(fileConn)
}
# Chunk 6
# Chunk 7
# Chunk 8
# Chunk 9
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# Chunk 10
# Chunk 11
# Chunk 12
plot_chords(list("Bm" = "x24432", "Gm" = "355333", "F#" = "244322"))
# Chunk 13
# Chunk 14
# Chunk 15
# Chunk 16
# Chunk 17
# Chunk 18
# Chunk 19
plot_chords(list("Bm" = "224432",
"Em" = "779987",
"A7" = "575655",
"D" = "557775",
"G7" = "353433"))
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3, chord = y) #+ labs(tag = y) +
plot_grid(plotlist = plots,ncol = 4)
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3, chord = y) #+ labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3, chord = y) +#+ labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
# A wrapper around tabr::plot_chord() which allows multiple chords and styles them in my specific way (4 columns, transparent background etc.)
plot_chords <- function(chords){
# Get the maximum fret-delta of all chords
delta_max <- map_int(chords,function(x){
v <- suppressWarnings(as.integer(str_split(x,"",simplify = TRUE)))
max(v,na.rm = TRUE)-min(v, na.rm = TRUE)
}) %>%
max()
# Make a list of all chord plots
plots <- imap(chords,function(x,y){
v <- min(suppressWarnings(as.integer(str_split(x,"",simplify = TRUE))),na.rm = TRUE)
plot_chord(x,
labels = NULL,
fret_range = c(v,v+delta_max), # so that all chords span the same nr of frets
point_size = 4,
label_size = 3, chord = y) +#+ labs(tag = y) +
theme(
panel.background = element_rect(fill = "transparent"), # The theme
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
)
})
plot_grid(plotlist = plots,ncol = 4)
}
plot_chords(list("F#m" = "244222", "G#m" = "466444"))
knitr::opts_chunk$get()
git add -A
